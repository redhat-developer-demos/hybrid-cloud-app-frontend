{"version":3,"sources":["components/MessageRequest.js","components/ResponsesTable.js","components/MessageResponse.js","components/CloudMessagesChart.js","components/MessageWorkers.js","App.js","serviceWorker.js","index.js"],"names":["MessageRequest","useState","text","setText","uppercase","setUppercase","reverse","setReverse","handleSubmit","event","preventDefault","data","axios","post","process","then","response","status","catch","error","console","log","Fragment","className","Form","isHorizontal","onSubmit","FormGroup","label","isRequired","TextInput","type","id","name","autoFocus","onChange","value","maxLength","Checkbox","isChecked","ActionGroup","Button","variant","onClick","isDisabled","length","RenderPagination","totalCount","page","perPage","handleSetPage","handlePerPageSelect","Pagination","isCompact","itemCount","defaultToFullPage","onSetPage","onPerPageSelect","perPageOptions","title","ResponsesTable","rows","columns","transforms","cellWidth","setPerPage","pageRows","setPageRows","setPage","useEffect","slice","currentRows","map","row","cells","_evt","newPerPage","newPage","startIdx","endIdx","__evt","Table","aria-label","styles","modifiers","nowrap","EmptyState","EmptyStateIcon","icon","FlagsIcon","Title","headingLevel","size","EmptyStateBody","MessageResponse","responses","setResponses","interval","setInterval","get","clearInterval","rowData","forEach","object","cloud","push","buildRows","CloudMessagesChart","workerData","style","height","width","ChartDonut","ariaDesc","ariaTitle","constrainToVisibleArea","labels","datum","x","y","legendData","legendOrientation","legendPosition","padding","bottom","left","right","top","subTitle","themeColor","ChartThemeColor","multiOrdered","MessageWorkers","workers","setWorkers","rp","chartData","App","TitleSizes","Divider","Flex","spaceItems","modifier","FlexItem","flex","default","isVertical","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.958dceb5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Form,\n  FormGroup,\n  TextInput,\n  Checkbox,\n  ActionGroup,\n  Button\n} from '@patternfly/react-core';\nimport axios from 'axios';\n\nconst MessageRequest = () => {\n  const [text, setText] = useState(\"\")\n  const [uppercase, setUppercase] = useState(false)\n  const [reverse, setReverse] = useState(false)\n\n  const clearState = () => {\n    setText(\"\");\n    setUppercase(false);\n    setReverse(false);\n  }\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    //TODO prevet SQL  Injection, JS Injection \n    var data = { text, uppercase, reverse }\n    //console.log(\"Sending Request \" + JSON.stringify(data));\n    setText(\"\");\n    axios.post(process.env.REACT_APP_API_URL, data)\n      .then(function (response) {\n        if (response.status === 202) {\n          //console.log(\"Message sent!\");\n        }\n      })\n      .catch(function (error) {\n        console.log(\"Error sending message\", error);\n      });\n  }\n\n  return (\n    <React.Fragment>\n      <h2 className=\"pf-c-title pf-m-lg\">&nbsp;</h2>\n      <Form isHorizontal onSubmit={handleSubmit}>\n        <FormGroup label=\"Enter a message:\" isRequired>\n          <TextInput type=\"text\"\n            isRequired\n            id=\"text\"\n            name=\"text\"\n            autoFocus\n            onChange={setText}\n            value={text}\n            maxLength=\"30\" />\n        </FormGroup>\n\n        <FormGroup label=\"Response formatting:\">\n          <Checkbox id=\"request-uppercase\"\n            label=\"Uppercase\"\n            type=\"checkbox\"\n            name=\"uppercase\"\n            onChange={setUppercase}\n            isChecked={uppercase} />\n          <Checkbox id=\"request-reverse\"\n            label=\"Reverse\"\n            type=\"checkbox\"\n            name=\"reverse\"\n            onChange={setReverse}\n            isChecked={reverse} />\n        </FormGroup>\n        <ActionGroup className=\"pf-u-float-right\">\n          <Button variant=\"primary\"\n            onClick={handleSubmit}\n            isDisabled={text.length === 0}>Send Request</Button>\n          <Button variant=\"link\" onClick={clearState}>Cancel</Button>\n        </ActionGroup>\n      </Form>\n    </React.Fragment>\n  );\n}\n\nexport default MessageRequest;","import React, { useState, useEffect } from \"react\";\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  cellWidth,\n} from '@patternfly/react-table';\nimport { EmptyState, EmptyStateBody, Title, EmptyStateIcon, Pagination } from '@patternfly/react-core';\nimport FlagsIcon from '@patternfly/react-icons/dist/js/icons/messages-icon';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\n\nconst RenderPagination = ({\n  totalCount,\n  page,\n  perPage,\n  handleSetPage,\n  handlePerPageSelect }) => {\n  return (<Pagination\n    isCompact\n    itemCount={totalCount}\n    page={page}\n    perPage={perPage}\n    defaultToFullPage\n    onSetPage={handleSetPage}\n    onPerPageSelect={handlePerPageSelect}\n    perPageOptions={[\n      { title: \"7\", value: 7 },\n      { title: \"10\", value: 10 },\n      { title: \"15\", value: 15 },\n      { title: '20', value: 20 }\n    ]}\n  />);\n}\nconst ResponsesTable = ({ rows }) => {\n  const defaultPerPage = 7;\n  const columns = [\n    {\n      title: 'Response',\n      transforms: [cellWidth(10)]\n    },\n    {\n      title: 'Cloud',\n      transforms: [cellWidth(10)]\n    }\n  ];\n  const [perPage, setPerPage] = useState(defaultPerPage)\n  const [pageRows, setPageRows] = useState([])\n  const [page, setPage] = useState(1)\n\n  const handlePerPageSelect = (_evt, newPerPage, newPage, startIdx, endIdx) => {\n    //console.log(\"handlePerPageSelect\", rows)\n    setPerPage(newPerPage);\n    setPage(newPage);\n    setPageRows(rows.slice(startIdx, endIdx));\n  };\n\n  const handleSetPage = (__evt, newPage, perPage, startIdx, endIdx) => {\n    //console.log(\"handleSetPage\", rows)\n    setPage(newPage);\n    setPageRows(rows.slice(startIdx, endIdx));\n  };\n\n  useEffect(() => {\n    setPageRows(rows.length > defaultPerPage ? rows.slice(0, defaultPerPage) : rows)\n  }, [rows, defaultPerPage, setPageRows]);\n\n  const currentRows = pageRows.map((row) => ({ cells: row.cells }));\n\n  return (\n    <React.Fragment>\n      <RenderPagination\n        totalCount={rows.length}\n        page={page}\n        perPage={perPage}\n        handlePerPageSelect={handlePerPageSelect}\n        handleSetPage={handleSetPage}\n      />\n      <Table aria-label=\"Responses\"\n        cells={columns}\n        rows={currentRows}>\n        <TableHeader className={styles.modifiers.nowrap} />\n        <TableBody />\n      </Table>\n      {rows.length <= 0 &&\n        <EmptyState>\n          <EmptyStateIcon icon={FlagsIcon} />\n          <Title headingLevel=\"h2\" size=\"lg\">\n            No messages.\n        </Title>\n          <EmptyStateBody>\n            No messages yet, use \"Send Request\" above to send one.\n        </EmptyStateBody>\n        </EmptyState>\n      }\n    </React.Fragment>\n  );\n}\n\nexport default ResponsesTable;","import React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\n\nimport ResponsesTable from './ResponsesTable';\n\nconst MessageResponse = () => {\n\n  const [responses, setResponses] = useState([]);\n\n  const buildRows = () => {\n    //console.log(\"Responses:\", JSON.stringify(responses))\n    if (responses && responses.length > 0) {\n      const rowData = [];\n      responses.forEach(object => {\n        const row = [];\n        const cloud = object['cloud'];\n        const response = object['response'];\n        //console.log(`${cloud}: ${response}`);\n        row.push(response);\n        row.push(cloud);\n        rowData.push({ cells: row })\n      });\n      //console.log(\"Table Rows\", JSON.stringify(rowData))\n      return rowData;\n    }\n    return [];\n\n  }\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      axios.get(process.env.REACT_APP_API_RESPONSES_URL)\n        .then(function (response) {\n          if (response.status === 200) {\n            if (response.data) {\n              setResponses(response.data);\n            } else {\n              console.log(\"No responses data data in response\");\n            }\n          }\n        })\n        .catch(function (error) {\n          console.log(\"Error getting responses data\", error);\n        });\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n\n  return (\n    <ResponsesTable rows={buildRows()} />\n  );\n}\n\nexport default MessageResponse;","import React from 'react';\nimport { ChartDonut, ChartThemeColor } from '@patternfly/react-charts';\n\nconst CloudMessagesChart = ({ workerData }) => {\n  return (\n    <div style={{ height: '230px', width: '350px' }}>\n      <ChartDonut\n        ariaDesc=\"Processed Messages\"\n        ariaTitle=\"Responses\"\n        constrainToVisibleArea={true}\n        data={workerData.data}\n        labels={({ datum }) => `${datum.x}: ${datum.y}%`}\n        legendData={workerData.legendData}\n        legendOrientation=\"vertical\"\n        legendPosition=\"right\"\n        padding={{\n          bottom: 20,\n          left: 20,\n          right: 140, // Adjusted to accommodate legend\n          top: 20\n        }}\n        subTitle=\"Processed Messages\"\n        title={workerData.title}\n        themeColor={ChartThemeColor.multiOrdered}\n        width={350}\n      />\n    </div>\n  );\n};\n\nexport default CloudMessagesChart;","import React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\n\nimport CloudMessagesChart from './CloudMessagesChart'\n\nconst MessageWorkers = () => {\n  const [workers, setWorkers] = useState([]);\n\n  const chartData = () => {\n    //console.log(\"Workers\", JSON.stringify(workers))\n    const data = [];\n    const legendData = [];\n    let title = 0;\n    if (workers && workers.length > 0) {\n      workers.forEach(object => {\n        const cloud = object[0]\n        const rp = object[1];\n        //console.log(`${cloud}: ${rp}`);\n        title += rp;\n        data.push({ x: cloud, y: rp })\n        legendData.push({ name: `${cloud}: ${rp}` });\n      });\n      const chartData = { data, legendData, title }\n      //console.log(\"Rows\", JSON.stringify(chartData))\n      return chartData;\n    }\n\n    return { data: [], legendData: [], title };\n  }\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      axios.get(process.env.REACT_APP_API_WORKER_URL)\n        .then(function (response) {\n          if (response.status === 200) {\n            if (response.data) {\n              setWorkers(response.data);\n            } else {\n              console.log(\"No worker data data in response\");\n            }\n          }\n        })\n        .catch(function (error) {\n          console.log(\"Error getting worker data\", error);\n        });\n\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      <CloudMessagesChart workerData={chartData()} />\n    </React.Fragment>\n  );\n}\n\nexport default MessageWorkers;","import React from 'react';\nimport { Divider, Flex, FlexItem, Title, TitleSizes } from '@patternfly/react-core';\n\n//Application \nimport './App.css';\nimport MessageRequest from './components/MessageRequest'\nimport MessageResponse from './components/MessageResponse'\nimport MessageWorkers from './components/MessageWorkers'\n\nconst App = () => {\n\n  return (\n    <React.Fragment>\n      <Title headingLevel=\"h1\" size={TitleSizes['4xl']}>\n        Hybrid Cloud Demo\n      </Title>\n      <Divider />\n      <div id=\"-body-content\">\n        <MessageRequest />\n      </div>\n      <Divider />\n      <Flex spaceItems={{ modifier: 'spaceItemsXl' }}>\n        <FlexItem flex={{ default: 'flex_2' }}>\n          <Title headingLevel=\"h1\" size={TitleSizes['2xl']}>\n            Responses\n          </Title>\n          <MessageResponse />\n        </FlexItem>\n        <Divider isVertical />\n        <FlexItem>\n          <Title headingLevel=\"h1\" size={TitleSizes['2xl']}>\n            Messages\n          </Title>\n          <MessageWorkers />\n        </FlexItem>\n      </Flex>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '@patternfly/react-core/dist/styles/base.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}