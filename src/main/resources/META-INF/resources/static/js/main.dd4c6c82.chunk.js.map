{"version":3,"sources":["components/MessageRequest.js","components/ResponsesTable.js","components/MessageResponse.js","components/CloudMessagesChart.js","components/MessageWorkers.js","utils/utils.js","App.js","index.js"],"names":["MessageRequest","responseHandler","useState","text","setText","uppercase","setUppercase","reverse","setReverse","clearState","handleSubmit","event","preventDefault","data","axios","post","process","then","response","status","console","log","catch","error","Fragment","className","Form","isHorizontal","onSubmit","FormGroup","label","isRequired","TextInput","type","id","name","autoFocus","onChange","value","maxLength","Checkbox","isChecked","ActionGroup","Button","variant","onClick","isDisabled","length","RenderPagination","totalCount","page","perPage","handleSetPage","handlePerPageSelect","Pagination","isCompact","itemCount","defaultToFullPage","onSetPage","onPerPageSelect","perPageOptions","title","ResponsesTable","rows","setPerPage","slice","pageRows","setPageRows","setPage","currentRows","map","row","cells","_evt","newPerPage","newPage","startIdx","endIdx","__evt","Table","aria-label","styles","modifiers","nowrap","EmptyState","EmptyStateIcon","icon","FlagsIcon","Title","headingLevel","size","EmptyStateBody","MessageResponse","responses","res","rowData","forEach","object","Object","entries","key","push","buildRows","CloudMessagesChart","workerData","style","height","width","ChartDonut","ariaDesc","ariaTitle","constrainToVisibleArea","labels","datum","x","y","legendData","legendOrientation","legendPosition","padding","bottom","left","right","top","subTitle","themeColor","ChartThemeColor","multiOrdered","MessageWorkers","workers","rp","chartData","computeResponses","resp","worker","w","_","responseData","cloudId","wIdx","findIndex","cloud","requestsProcessed","requestErrors","concat","cw","nth","rProcessed","rErrors","App","setResponses","setWorkers","TitleSizes","Divider","msgData","reqId","requestIds","workerId","Flex","spaceItems","modifier","FlexItem","flex","default","isVertical","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dd4c6c82.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Form,\n  FormGroup,\n  TextInput,\n  Checkbox,\n  ActionGroup,\n  Button\n} from '@patternfly/react-core';\nimport axios from 'axios';\n\nconst MessageRequest = ({ responseHandler }) => {\n  const [text, setText] = useState(\"\")\n  const [uppercase, setUppercase] = useState(false)\n  const [reverse, setReverse] = useState(false)\n\n  const clearState = () => {\n    setText(\"\");\n    setUppercase(false);\n    setReverse(false);\n  }\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    //TODO prevet SQL  Injection, JS Injection \n    var data = { text, uppercase, reverse }\n    //console.log(\"Sending Request \" + JSON.stringify(data));\n    clearState();\n    axios.post(process.env.REACT_APP_API_URL, data)\n      .then(function (response) {\n        //console.log(\"Received response \", response);\n        if (response.status === 200) {\n          if (response.data) {\n            responseHandler(response.data);\n          } else {\n            console.log(\"No data in response\");\n          }\n        }\n      })\n      .catch(function (error) {\n        console.log(\"Error sending message\", error);\n      });\n  }\n\n  return (\n    <React.Fragment>\n      <h2 className=\"pf-c-title pf-m-lg\">&nbsp;</h2>\n      <Form isHorizontal onSubmit={handleSubmit}>\n        <FormGroup label=\"Enter a message:\" isRequired>\n          <TextInput type=\"text\"\n            isRequired\n            id=\"text\"\n            name=\"text\"\n            autoFocus\n            onChange={setText}\n            value={text}\n            maxLength=\"30\" />\n        </FormGroup>\n\n        <FormGroup label=\"Response formatting:\">\n          <Checkbox id=\"request-uppercase\"\n            label=\"Uppercase\"\n            type=\"checkbox\"\n            name=\"uppercase\"\n            onChange={setUppercase}\n            isChecked={uppercase} />\n          <Checkbox id=\"request-reverse\"\n            label=\"Reverse\"\n            type=\"checkbox\"\n            name=\"reverse\"\n            onChange={setReverse}\n            isChecked={reverse} />\n        </FormGroup>\n        <ActionGroup className=\"pf-u-float-right\">\n          <Button variant=\"primary\"\n            onClick={handleSubmit}\n            isDisabled={text.length === 0}>Send Request</Button>\n          <Button variant=\"link\" onClick={clearState}>Cancel</Button>\n        </ActionGroup>\n      </Form>\n    </React.Fragment>\n  );\n}\n\nexport default MessageRequest;","import React, { useState } from \"react\";\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n} from '@patternfly/react-table';\nimport { EmptyState, EmptyStateBody, Title, EmptyStateIcon, Pagination } from '@patternfly/react-core';\nimport FlagsIcon from '@patternfly/react-icons/dist/js/icons/messages-icon';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\n\nconst RenderPagination = ({\n  totalCount,\n  page,\n  perPage,\n  handleSetPage,\n  handlePerPageSelect }) => {\n  return (<Pagination\n    isCompact\n    itemCount={totalCount}\n    page={page}\n    perPage={perPage}\n    defaultToFullPage\n    onSetPage={handleSetPage}\n    onPerPageSelect={handlePerPageSelect}\n    perPageOptions={[\n      { title: \"3\", value: 3 },\n      { title: \"5\", value: 5 },\n      { title: \"10\", value: 10 },\n      { title: \"15\", value: 15 },\n      { title: '20', value: 20 }\n    ]}\n  />);\n}\nconst ResponsesTable = ({ rows }) => {\n  const defaultPerPage = 3;\n  const columns = ['Response', 'Cloud'];\n  const [perPage, setPerPage] = useState(defaultPerPage)\n  const [pageRows, setPageRows] = useState(rows.slice(0, defaultPerPage))\n  const [page, setPage] = useState(1)\n\n  const handlePerPageSelect = (_evt, newPerPage, newPage, startIdx, endIdx) => {\n    //console.log(\"handlePerPageSelect\", rows)\n    setPerPage(newPerPage);\n    setPage(newPage);\n    setPageRows(rows.slice(startIdx, endIdx));\n  };\n\n  const handleSetPage = (__evt, newPage, perPage, startIdx, endIdx) => {\n    //console.log(\"handleSetPage\", rows)\n    setPage(newPage);\n    setPageRows(rows.slice(startIdx, endIdx));\n  };\n\n  const currentRows = rows.map((row) => ({ cells: row.cells }));\n\n  return (\n    <React.Fragment>\n      <RenderPagination\n        totalCount={rows.length}\n        page={page}\n        perPage={perPage}\n        handlePerPageSelect={handlePerPageSelect}\n        handleSetPage={handleSetPage}\n      />\n      <Table aria-label=\"Responses\" cells={columns} rows={currentRows}>\n        <TableHeader className={styles.modifiers.nowrap} />\n        <TableBody />\n      </Table>\n      {pageRows.length <= 0 &&\n        <EmptyState>\n          <EmptyStateIcon icon={FlagsIcon} />\n          <Title headingLevel=\"h2\" size=\"lg\">\n            No messages.\n        </Title>\n          <EmptyStateBody>\n            No messages yet, use \"Send Request\" above to send one.\n        </EmptyStateBody>\n        </EmptyState>\n      }\n    </React.Fragment>\n  );\n}\n\nexport default ResponsesTable;","import React from \"react\";\nimport ResponsesTable from './ResponsesTable';\n\nconst MessageResponse = ({ responses }) => {\n\n\n  const buildRows = (res) => {\n    //console.log(\"Responses:\", JSON.stringify(res))\n    if (res && res.length > 0) {\n      const rowData = [];\n      res.forEach(object => {\n        const row = [];\n        for (const [key, value] of Object.entries(object)) {\n          //console.log(`${key}: ${value['text']}`);\n          row.push(value['text']);\n          row.push(key);\n        }\n        rowData.push({ cells: row })\n      });\n      //console.log(\"Table Rows\", JSON.stringify(rowData))\n      return rowData;\n    }\n    return [];\n\n  }\n  return (\n    <ResponsesTable rows={buildRows(responses)} />\n  );\n}\n\nexport default MessageResponse;","import React from 'react';\nimport { ChartDonut, ChartThemeColor } from '@patternfly/react-charts';\n\nconst CloudMessagesChart = ({ workerData }) => {\n  return (\n    <div style={{ height: '230px', width: '350px' }}>\n      <ChartDonut\n        ariaDesc=\"Processed Messages\"\n        ariaTitle=\"Responses\"\n        constrainToVisibleArea={true}\n        data={workerData.data}\n        labels={({ datum }) => `${datum.x}: ${datum.y}%`}\n        legendData={workerData.legendData}\n        legendOrientation=\"vertical\"\n        legendPosition=\"right\"\n        padding={{\n          bottom: 20,\n          left: 20,\n          right: 140, // Adjusted to accommodate legend\n          top: 20\n        }}\n        subTitle=\"Processed Messages\"\n        title={workerData.title}\n        themeColor={ChartThemeColor.multiOrdered}\n        width={350}\n      />\n    </div>\n  );\n};\n\nexport default CloudMessagesChart;","import React from \"react\";\nimport CloudMessagesChart from './CloudMessagesChart'\n\nconst MessageWorkers = ({ workers }) => {\n\n  const chartData = (workers) => {\n    //console.log(\"Workers\", JSON.stringify(workers))\n    const data = [];\n    const legendData = [];\n    let title = 0;\n    if (workers && workers.length > 0) {\n      workers.forEach(object => {\n        for (const [key, value] of Object.entries(object)) {\n          const rp = value['requestsProcessed'];\n          //console.log(`${key}: ${rp}`);\n          title += rp;\n          data.push({ x: key, y: rp })\n          legendData.push({ name: `${key}: ${rp}` });\n        }\n      });\n      const chartData = { data, legendData, title }\n      //console.log(\"Rows\", JSON.stringify(chartData))\n      return chartData;\n    }\n\n    return { data: [], legendData: [], title };\n  }\n\n  return (\n    <React.Fragment>\n      <CloudMessagesChart workerData={chartData(workers)} />\n    </React.Fragment>\n  );\n}\n\nexport default MessageWorkers;","import _ from 'lodash';\n\nfunction computeResponses (resp, workers, worker) {\n  let workerData = workers ? _.slice(workers) : [];\n  //console.log(\"WorkerData\", workerData);\n  let responseData = { [resp.cloudId]: { text: resp.text } };\n  let wIdx = _.findIndex(workers, { [worker.cloud]: {} })\n  let w;\n  if (wIdx === -1) {\n    //console.log(\"Cloud not found add count\")\n    w = {\n      [worker.cloud]: {\n        requestsProcessed: worker.requestsProcessed,\n        requestErrors: worker.requestErrors ? worker.requestErrors : 0,\n      }\n    }\n    workerData = _.concat(workers, w);\n  } else {\n    const cw = _.nth(workers, wIdx)[worker.cloud];\n    const rProcessed = worker.requestsProcessed + cw.requestsProcessed;\n    const rErrors = worker.requestErrors ? worker.requestErrors : 0;\n    w = {\n      [worker.cloud]: {\n        requestsProcessed: rProcessed,\n        requestErrors: rErrors + cw.requestErrors,\n      }\n    }\n    workerData[wIdx] = w;\n    //console.log(\"Cloud found update count\", JSON.stringify(workerData))\n  }\n  return {\n    responseData, workerData\n  }\n}\n\nexport default computeResponses;","import React, { useState } from 'react';\nimport { Divider, Flex, FlexItem, Title, TitleSizes } from '@patternfly/react-core';\nimport _ from 'lodash';\n\n//Application \nimport './App.css';\nimport MessageRequest from './components/MessageRequest'\nimport MessageResponse from './components/MessageResponse'\nimport MessageWorkers from './components/MessageWorkers'\nimport computeResponses from './utils/utils';\n\nconst App = () => {\n  const [responses, setResponses] = useState([]);\n  const [workers, setWorkers] = useState([]);\n\n  const handleResponses = (msgData) => {\n    //console.log(\"Handle Response \", msgData);\n    if (msgData) {\n      const reqId = msgData.requestIds.reverse();\n      if (reqId) {\n        const resp = msgData.responses[reqId];\n        const worker = msgData.workers[resp.workerId];\n        const { responseData, workerData } = computeResponses(resp, workers, worker)\n        setResponses(_.concat(responses, responseData));\n        setWorkers(workerData);\n      }\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Title headingLevel=\"h1\" size={TitleSizes['4xl']}>\n        Hybrid Cloud Demo\n      </Title>\n      <Divider />\n      <div id=\"-body-content\">\n        <MessageRequest responseHandler={handleResponses} />\n      </div>\n      <Divider />\n      <Flex spaceItems={{ modifier: 'spaceItemsXl' }}>\n        <FlexItem flex={{ default: 'flex_2' }}>\n          <Title headingLevel=\"h1\" size={TitleSizes['2xl']}>\n            Responses\n          </Title>\n          <MessageResponse responses={responses} />\n        </FlexItem>\n        <Divider isVertical />\n        <FlexItem>\n          <Title headingLevel=\"h1\" size={TitleSizes['2xl']}>\n            Messages\n          </Title>\n          <MessageWorkers workers={workers} />\n        </FlexItem>\n      </Flex>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '@patternfly/react-core/dist/styles/base.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}